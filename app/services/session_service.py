"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Å—Å–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
"""
import datetime
import logging
from typing import Optional

from aiogram import Bot
from sqlmodel import Session, select

from app.core.config import settings
from app.models.models import SupportAgent, SupportSession
from app.services import agent_service


async def create_new_session(
    session: Session, bot: Bot, user_telegram_id: int, user_username: Optional[str]
) -> Optional[SupportSession]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

    1. –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
    2. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É.
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ –ë–î.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä aiogram Bot.
    :param user_telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ —Å–µ—Å—Å–∏—é.
    :param user_username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    logging.info(f"Attempting to create a new session for user {user_telegram_id}")

    # 1. –ê—Ç–æ–º–∞—Ä–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –∏ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    available_agent = agent_service.find_available_agent(session)
    if not available_agent:
        logging.warning(f"No available agents for new session request from user {user_telegram_id}")
        return None

    try:
        # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
        topic_name = f"–°–µ—Å—Å–∏—è —Å @{user_username or user_telegram_id}"
        topic = await bot.create_forum_topic(
            chat_id=settings.SUPERGROUP_ID,
            name=topic_name
        )
        logging.info(f"Created new topic {topic.message_thread_id} for user {user_telegram_id}")

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
        start_message = (
            f"‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** <a href='tg://user?id={user_telegram_id}'>{user_username or user_telegram_id}</a>\n"
            f"üÜî **User ID:** `{user_telegram_id}`\n\n"
            f"üßë‚Äçüíª **–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç:** @{available_agent.username or available_agent.telegram_id}"
        )
        await bot.send_message(
            chat_id=settings.SUPERGROUP_ID,
            message_thread_id=topic.message_thread_id,
            text=start_message
        )

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        new_session = SupportSession(
            user_telegram_id=user_telegram_id,
            agent_telegram_id=available_agent.telegram_id,
            topic_id=topic.message_thread_id,
            status="active",
        )
        session.add(new_session)
        session.commit()
        session.refresh(new_session)
        logging.info(f"New session {new_session.id} created and saved to DB.")

        return new_session

    except Exception as e:
        logging.error(f"Failed to create topic or session for user {user_telegram_id}: {e}")
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å API Telegram),
        # –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∞–≥–µ–Ω—Ç–∞.
        session.rollback()
        # –ò—â–µ–º –∞–≥–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        agent_to_release = session.get(SupportAgent, available_agent.telegram_id)
        if agent_to_release:
            agent_to_release.is_available = True
            session.add(agent_to_release)
            session.commit()
            logging.info(f"Agent {agent_to_release.telegram_id} was released due to an error.")
        return None


async def close_session(session: Session, bot: Bot, active_session: SupportSession) -> bool:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

    1. –£–¥–∞–ª—è–µ—Ç —Ç–µ–º—É –∏–∑ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.
    2. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –≤ –ë–î –Ω–∞ 'closed'.
    3. –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞, –¥–µ–ª–∞—è –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º.

    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä aiogram Bot.
    :param active_session: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
    :return: True, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞, –∏–Ω–∞—á–µ False.
    """
    logging.info(f"Attempting to close session {active_session.id} (topic {active_session.topic_id})")
    try:
        # 1. –£–¥–∞–ª—è–µ–º —Ç–µ–º—É –∏–∑ Telegram
        await bot.delete_forum_topic(
            chat_id=settings.SUPERGROUP_ID,
            message_thread_id=active_session.topic_id
        )
        logging.info(f"Topic {active_session.topic_id} deleted successfully.")

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –≤ –ë–î
        active_session.status = "closed"
        active_session.closed_at = datetime.datetime.now()
        session.add(active_session)

        # 3. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = session.get(SupportAgent, active_session.agent_telegram_id)
        if agent:
            agent.is_available = True
            session.add(agent)
            logging.info(f"Agent {agent.telegram_id} is now available.")
        else:
            logging.warning(f"Could not find agent {active_session.agent_telegram_id} to make available.")

        session.commit()
        logging.info(f"Session {active_session.id} has been closed and saved to DB.")
        return True

    except Exception as e:
        logging.error(f"Failed to close session {active_session.id}: {e}")
        session.rollback()
        return False